{"ast":null,"code":"var _jsxFileName = \"/Users/jainovennatt/Documents/UT/EE461L/EE461L_IDB/test_react_book/test_react_book/src/components2/Results.jsx\";\nimport React from \"react\";\nimport Result from \"./Result\";\nimport { Link as RouterLink, Redirect } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\nimport List from \"@material-ui/core/List\";\nimport PaginationBar from \"./PaginationBar\";\nimport ListItem from \"@material-ui/core/ListItem\";\n\nclass Results extends React.Component {\n  getDummyResults() {\n    let results = [];\n\n    for (let i = 0; i < 5; i++) {\n      results.push({\n        title: \"And Then There Were None\",\n        author: \"Agatha Christie\",\n        description: \"Sed metus dui, dictum quis eleifend non, malesuada ut lorem. In finibus nulla quis efficitur rutrum. Aenean feugiat mauris magna, sollicitudin rhoncus mi sagittis vel. Quisque a sodales urna, eu volutpat metus. Phasellus vitae quam non enim auctor ornare vel et odio. Pellentesque tempus erat porttitor ex laoreet, eget iaculis leo ornare. Maecenas eu sapien ornare dolor suscipit facilisis. Nullam scelerisque, purus quis feugiat efficitur, lacus enim faucibus urna, eu ullamcorper metus odio et risus. Duis ac sem mauris. Praesent et porttitor mi, ut luctus metus. Mauris imperdiet condimentum purus, vitae mattis ligula feugiat at. Sed ut tellus ac arcu pharetra venenatis sed id risus. \"\n      });\n    }\n\n    return results;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.nextPage = (event, newPageNum) => {\n      console.log(\"updating page!\");\n      console.log(newPageNum);\n      this.setState({\n        pageNum: newPageNum\n      });\n      let newUrl = \"/results/\" + this.state.typeOfSearch + \"/\" + this.state.resultsQuery + \"/\" + newPageNum;\n      window.location.replace(newUrl);\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: newUrl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 12\n        }\n      });\n    };\n\n    this.state = {\n      typeOfSearch: this.props.match.params.type,\n      resultsQuery: this.props.match.params.query,\n      pageNum: this.props.match.params.pageNum,\n      numPages: 100,\n      reloadResults: false\n    };\n  }\n\n  componentDidMount() {\n    // make AJAX call based on query, needs to figure out number of pages server side, i think?\n    console.log(\"results ajax call first time\");\n  }\n\n  componentDidUpdate() {\n    // make AJAX call based on query, needs to figure out number of pages server side, i think?\n    console.log(\"results ajax call update\");\n  } //rerenders page but with new pages information\n  //this function might need to be passed into from results so we can rerender the page but maybe not\n\n\n  render() {\n    console.log(\"in results\");\n    console.log(this.state.typeOfSearch);\n    console.log(this.state.resultsQuery);\n    console.log(this.state.pageNum);\n    let results = this.getDummyResults();\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(List, {\n      variant: \"flush\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, results.map((result, index) => /*#__PURE__*/React.createElement(Link, {\n      underline: \"none\",\n      component: RouterLink,\n      to: \"/book/1234\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Result, {\n      title: result.title,\n      author: result.author,\n      description: result.description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }))))), /*#__PURE__*/React.createElement(PaginationBar, {\n      currentPage: !isNaN(this.state.pageNum) ? Number(this.state.pageNum) : 1,\n      numPages: this.state.numPages,\n      updatePage: this.nextPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Results;","map":{"version":3,"sources":["/Users/jainovennatt/Documents/UT/EE461L/EE461L_IDB/test_react_book/test_react_book/src/components2/Results.jsx"],"names":["React","Result","Link","RouterLink","Redirect","List","PaginationBar","ListItem","Results","Component","getDummyResults","results","i","push","title","author","description","constructor","props","nextPage","event","newPageNum","console","log","setState","pageNum","newUrl","state","typeOfSearch","resultsQuery","window","location","replace","match","params","type","query","numPages","reloadResults","componentDidMount","componentDidUpdate","render","map","result","index","isNaN","Number"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Result from \"./Result\";\nimport { Link as RouterLink, Redirect } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\nimport List from \"@material-ui/core/List\";\nimport PaginationBar from \"./PaginationBar\";\nimport ListItem from \"@material-ui/core/ListItem\";\n\nclass Results extends React.Component {\n  getDummyResults() {\n    let results = [];\n    for (let i = 0; i < 5; i++) {\n      results.push({\n        title: \"And Then There Were None\",\n        author: \"Agatha Christie\",\n        description:\n          \"Sed metus dui, dictum quis eleifend non, malesuada ut lorem. In finibus nulla quis efficitur rutrum. Aenean feugiat mauris magna, sollicitudin rhoncus mi sagittis vel. Quisque a sodales urna, eu volutpat metus. Phasellus vitae quam non enim auctor ornare vel et odio. Pellentesque tempus erat porttitor ex laoreet, eget iaculis leo ornare. Maecenas eu sapien ornare dolor suscipit facilisis. Nullam scelerisque, purus quis feugiat efficitur, lacus enim faucibus urna, eu ullamcorper metus odio et risus. Duis ac sem mauris. Praesent et porttitor mi, ut luctus metus. Mauris imperdiet condimentum purus, vitae mattis ligula feugiat at. Sed ut tellus ac arcu pharetra venenatis sed id risus. \"\n      });\n    }\n    return results;\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      typeOfSearch: this.props.match.params.type,\n      resultsQuery: this.props.match.params.query,\n      pageNum: this.props.match.params.pageNum,\n      numPages: 100,\n      reloadResults: false\n    };\n  }\n\n  componentDidMount() {\n    // make AJAX call based on query, needs to figure out number of pages server side, i think?\n    console.log(\"results ajax call first time\");\n  }\n\n  componentDidUpdate() {\n    // make AJAX call based on query, needs to figure out number of pages server side, i think?\n    console.log(\"results ajax call update\");\n  }\n\n  //rerenders page but with new pages information\n  //this function might need to be passed into from results so we can rerender the page but maybe not\n\n  nextPage = (event, newPageNum) => {\n    console.log(\"updating page!\");\n    console.log(newPageNum);\n    this.setState({\n      pageNum: newPageNum\n    });\n    let newUrl =\n      \"/results/\" +\n      this.state.typeOfSearch +\n      \"/\" +\n      this.state.resultsQuery +\n      \"/\" +\n      newPageNum;\n    window.location.replace(newUrl);\n    return <Redirect to={newUrl} />;\n  };\n\n  render() {\n    console.log(\"in results\");\n    console.log(this.state.typeOfSearch);\n    console.log(this.state.resultsQuery);\n    console.log(this.state.pageNum);\n    let results = this.getDummyResults();\n    return (\n      <React.Fragment>\n        <List variant=\"flush\">\n          {results.map((result, index) => (\n            <Link\n              underline=\"none\"\n              component={RouterLink}\n              to={\"/book/1234\"}\n              key={index}\n            >\n              <ListItem>\n                <Result\n                  title={result.title}\n                  author={result.author}\n                  description={result.description}\n                />\n              </ListItem>\n            </Link>\n          ))}\n        </List>\n        <PaginationBar\n          currentPage={\n            !isNaN(this.state.pageNum) ? Number(this.state.pageNum) : 1\n          }\n          numPages={this.state.numPages}\n          updatePage={this.nextPage}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Results;\n"]},"metadata":{},"sourceType":"module"}